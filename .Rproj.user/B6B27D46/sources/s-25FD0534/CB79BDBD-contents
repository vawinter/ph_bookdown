Introduction {#intro}


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

 **Pronghorn background**

The pronghorn, *Antilocapra americana*, is North Americas' only extant endemic ungulate, and has historical ranges within prarie, shrubland -steppe, and desert habitat in the contnental west. Recent population declines across this species geographic range have sparked a growing interest in investigating their previously understudied ecology. In Utah, it is currently unknown if this ungulate still undergoes an annual migration or its seasonal range distribution. 

Starting in 2016, the UDWR had begun fitting pronghorn with GPS collars as a part of their migration initiative. Using this data, I am to quantify space-use beahvior of pronghorn in Utah by delineating between migratory, resident, and nomiadic behavior of individuals in order to gain a better understanding of their population-level distribution patterns.

Here, I will be constructing a SQLIte database containing their individual information (sex, mortality, age, etc.) and tracking information (gps coordinates, sattilites, etc.) using the `DBI` and `RSQLite` packages.


 **Getting started**
First, install and load packages as follows:

```{r install, echo=TRUE, message=FALSE, warning=FALSE, paged.print=FALSE}
#install.packages("RSQLite")
#install.packages("DBI")

# Load in package
library(DBI)
# NOTE: as per Hadley Wickham, we often don't need all the tols in 'RSQLite', so we will laod in 'DBI' and call 'RSQLite' as needed.
```

 **Database structure**

Getting data from collarborators is no small task. For now, the databse structure will appear as follows and updates will be made as data is secured:

```{r logo, echo = FALSE, fig.align = "center", fig.cap = "Pronghorn data base structure", out.width = '50%'}
knitr::include_graphics("/Users/vermanica/Documents/VW_Final_Prj_RS/Final_prj_RS/Database_arrangement.png")
```

First: establish the data base connection and laod in appropriate .csv's

```{r echo=TRUE}
### Est. database connection ---
pronghorn <- dbConnect(drv = RSQLite::SQLite(), # Location of saved db
  "/Users/vermanica/Documents/VW_Final_Prj_RS/Final_prj_RS/Data/pronghorn.db")

class(pronghorn)
```

Now, let's set up the two tables.
```{r}
## Import data to the db ---

# Table 1 .csv
ph <- read.csv("/Users/vermanica/Documents/VW_Final_Prj_RS/Final_prj_RS/Data/PH_data/processed_data/ph.csv")

# Table 2 .csv
track <- read.csv("/Users/vermanica/Documents/VW_Final_Prj_RS/Final_prj_RS/Data/PH_data/processed_data/tracking.csv")
```
```


Table 1: **Pronghorn**
This is a table that contains all the fixed attributes of the collared individuals.

```{r eval=FALSE, include=FALSE}
#If I want to edit table 1 - pronghorn         
dbExecute(pronghorn, "CREATE TABLE pronghorn (
CollarID varchar(10),
             ID varchar(10),
             mortality char(6),
             sex char(1),
             age_class varchar(8),
             unit varchar(50),
             PRIMARY KEY (ID)
);")

# Write the table
dbWriteTable(pronghorn, "pronghorn", ph, append = TRUE)
```

Table 1: **Tracking**
- This is a table that contains all the GPS attributes of the collared individuals.

With this data, I hope to be able to delineate migration, determine seasonal home ranges, and eventually perform a survival analysis and model demographics for the Utah population..

```{r eval=FALSE, include=FALSE}
# Table 2 - tracking
dbExecute(pronghorn, "CREATE TABLE tracking (
  ID varchar(10),
          lat double,
          lon double,
          dop char(3),
          ObjectID varchar(8),
          NumSats char(2),
          Dimension char(1),
          dt text,
          FOREIGN KEY(ID) REFERENCES pronghorn(ID)
);")

# Write the table
dbWriteTable(pronghorn, "tracking", track, append = TRUE)
```

Last, let's do some checks to make sure everything worked
```{r echo=TRUE}
#Check that it worked ---
dbGetQuery(conn = pronghorn, statement = "SELECT* FROM pronghorn LIMIT 10;")
```

```{r echo=TRUE}
dbGetQuery(conn = pronghorn, statement = "SELECT* FROM tracking LIMIT 5;")
```

Looks good! We are all set.